/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbQueryExecutorService;
import com.mu.cmt.pfs.pfsdb.models.query.*;

@RestController(value = "Pfsdb.QueryExecutionController")
@RequestMapping("/pfsdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private PfsdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/qryOrt209CurrentPrice", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get current price from ort209")
    public Page<QryOrt209currentPriceResponse> executeQryOrt209CurrentPrice(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pSeqcod", required = false) String pseqcod, @RequestParam(value = "pSzeseq", required = false) Integer pszeseq, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryOrt209CurrentPrice");
        Page<QryOrt209currentPriceResponse> _result = queryService.executeQryOrt209CurrentPrice(pordnum, pshpnum, pseqcod, pszeseq, pageable);
        LOGGER.debug("got the result for named query: qryOrt209CurrentPrice, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryOrt209CurrentPrice")
    @RequestMapping(value = "/queries/qryOrt209CurrentPrice/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryOrt209CurrentPrice(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pSeqcod", required = false) String pseqcod, @RequestParam(value = "pSzeseq", required = false) Integer pszeseq, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryOrt209CurrentPrice");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryOrt209CurrentPrice";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryOrt209CurrentPrice(pordnum, pshpnum, pseqcod, pszeseq,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryOr207pk0UntprcAccess", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get access to update unit price")
    public QryOr207pk0untprcAccessResponse executeQryOr207pk0UntprcAccess(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pUserAppRoleList", required = false) String puserAppRoleList, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryOr207pk0UntprcAccess");
        QryOr207pk0untprcAccessResponse _result = queryService.executeQryOr207pk0UntprcAccess(pordnum, pprgid, puserAppRoleList);
        LOGGER.debug("got the result for named query: qryOr207pk0UntprcAccess, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryOrt205ShpnumLov", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query to get Ort205 shpnum")
    public Page<QryOrt205shpnumLovResponse> executeQryOrt205ShpnumLov(@RequestParam(value = "pOrdnum", required = false) String pordnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryOrt205ShpnumLov");
        Page<QryOrt205shpnumLovResponse> _result = queryService.executeQryOrt205ShpnumLov(pordnum, pageable);
        LOGGER.debug("got the result for named query: qryOrt205ShpnumLov, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryOrt205ShpnumLov")
    @RequestMapping(value = "/queries/qryOrt205ShpnumLov/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryOrt205ShpnumLov(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryOrt205ShpnumLov");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryOrt205ShpnumLov";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryOrt205ShpnumLov(pordnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryCl565pk0FuncIsExtnetClient", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query ordnum for an extranet Client")
    public Page<QryCl565pk0funcIsExtnetClientResponse> executeQryCl565pk0FuncIsExtnetClient(@RequestParam(value = "pOrdnum", required = false) String pordnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryCl565pk0FuncIsExtnetClient");
        Page<QryCl565pk0funcIsExtnetClientResponse> _result = queryService.executeQryCl565pk0FuncIsExtnetClient(pordnum, pageable);
        LOGGER.debug("got the result for named query: qryCl565pk0FuncIsExtnetClient, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryCl565pk0FuncIsExtnetClient")
    @RequestMapping(value = "/queries/qryCl565pk0FuncIsExtnetClient/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryCl565pk0FuncIsExtnetClient(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryCl565pk0FuncIsExtnetClient");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryCl565pk0FuncIsExtnetClient";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryCl565pk0FuncIsExtnetClient(pordnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetChgReasonList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "list of price change reasons")
    public Page<QryGetChgReasonListResponse> executeQryGetChgReasonList(@RequestParam(value = "pChangeCategory", required = false) String pchangeCategory, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetChgReasonList");
        Page<QryGetChgReasonListResponse> _result = queryService.executeQryGetChgReasonList(pchangeCategory, pageable);
        LOGGER.debug("got the result for named query: qryGetChgReasonList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetChgReasonList")
    @RequestMapping(value = "/queries/qryGetChgReasonList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetChgReasonList(@RequestParam(value = "pChangeCategory", required = false) String pchangeCategory, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetChgReasonList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetChgReasonList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetChgReasonList(pchangeCategory,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryOrt209RefColname", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query to get column names for ort209  clirefs")
    public Page<QryOrt209refColnameResponse> executeQryOrt209RefColname(@RequestParam(value = "pOrdnum", required = false) String pordnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryOrt209RefColname");
        Page<QryOrt209refColnameResponse> _result = queryService.executeQryOrt209RefColname(pordnum, pageable);
        LOGGER.debug("got the result for named query: qryOrt209RefColname, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryOrt209RefColname")
    @RequestMapping(value = "/queries/qryOrt209RefColname/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryOrt209RefColname(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryOrt209RefColname");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryOrt209RefColname";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryOrt209RefColname(pordnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryShpnumLov", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query list of ort205 shpnum")
    public Page<QryShpnumLovResponse> executeQryShpnumLov(@RequestParam(value = "pOrdnum", required = false) String pordnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryShpnumLov");
        Page<QryShpnumLovResponse> _result = queryService.executeQryShpnumLov(pordnum, pageable);
        LOGGER.debug("got the result for named query: qryShpnumLov, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryShpnumLov")
    @RequestMapping(value = "/queries/qryShpnumLov/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryShpnumLov(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryShpnumLov");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryShpnumLov";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryShpnumLov(pordnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryOr105wpk0YrnGetDefBaseyrnclr", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "function get default base yrnclr")
    public QryOr105wpk0yrnGetDefBaseyrnclrResponse executeQryOr105wpk0YrnGetDefBaseyrnclr(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pYrnclr", required = false) String pyrnclr, @RequestParam(value = "pBaseyrnclr", required = false) String pbaseyrnclr, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryOr105wpk0YrnGetDefBaseyrnclr");
        QryOr105wpk0yrnGetDefBaseyrnclrResponse _result = queryService.executeQryOr105wpk0YrnGetDefBaseyrnclr(pprgid, pyrnclr, pbaseyrnclr);
        LOGGER.debug("got the result for named query: qryOr105wpk0YrnGetDefBaseyrnclr, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryRft102ClirefColname", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get cliref column names from rft102")
    public Page<QryRft102clirefColnameResponse> executeQryRft102ClirefColname(@RequestParam(value = "pClicod", required = false) String pclicod, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryRft102ClirefColname");
        Page<QryRft102clirefColnameResponse> _result = queryService.executeQryRft102ClirefColname(pclicod, pageable);
        LOGGER.debug("got the result for named query: qryRft102ClirefColname, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryRft102ClirefColname")
    @RequestMapping(value = "/queries/qryRft102ClirefColname/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryRft102ClirefColname(@RequestParam(value = "pClicod", required = false) String pclicod, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryRft102ClirefColname");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryRft102ClirefColname";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryRft102ClirefColname(pclicod,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qrySy9200pk0GetUrlUpcharges", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get URL for Upcharge screen")
    public QrySy9200pk0getUrlUpchargesResponse executeQrySy9200pk0GetUrlUpcharges(@RequestParam(value = "pOtherParams", required = false) String potherParams, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qrySy9200pk0GetUrlUpcharges");
        QrySy9200pk0getUrlUpchargesResponse _result = queryService.executeQrySy9200pk0GetUrlUpcharges(potherParams);
        LOGGER.debug("got the result for named query: qrySy9200pk0GetUrlUpcharges, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryOrt207CurrentPrice", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query current prices")
    public Page<QryOrt207currentPriceResponse> executeQryOrt207CurrentPrice(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pPricecat", required = false) String ppricecat, @RequestParam(value = "pSeqcod", required = false) String pseqcod, @RequestParam(value = "pClionum", required = false) String pclionum, @RequestParam(value = "pSzeseq", required = false) String pszeseq, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryOrt207CurrentPrice");
        Page<QryOrt207currentPriceResponse> _result = queryService.executeQryOrt207CurrentPrice(pordnum, ppricecat, pseqcod, pclionum, pszeseq, pageable);
        LOGGER.debug("got the result for named query: qryOrt207CurrentPrice, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryOrt207CurrentPrice")
    @RequestMapping(value = "/queries/qryOrt207CurrentPrice/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryOrt207CurrentPrice(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pPricecat", required = false) String ppricecat, @RequestParam(value = "pSeqcod", required = false) String pseqcod, @RequestParam(value = "pClionum", required = false) String pclionum, @RequestParam(value = "pSzeseq", required = false) String pszeseq, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryOrt207CurrentPrice");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryOrt207CurrentPrice";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryOrt207CurrentPrice(pordnum, ppricecat, pseqcod, pclionum, pszeseq,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryCCFFabDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get fab details from ort120")
    public QryCcffabDetailsResponse executeQryCCFFabDetails(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryCCFFabDetails");
        QryCcffabDetailsResponse _result = queryService.executeQryCCFFabDetails(pordnum, pfabseq);
        LOGGER.debug("got the result for named query: qryCCFFabDetails, result:{}", _result);
        return _result;
    }

}