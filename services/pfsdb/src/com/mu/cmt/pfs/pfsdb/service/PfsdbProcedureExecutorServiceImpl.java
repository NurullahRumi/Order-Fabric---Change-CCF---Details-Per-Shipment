/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;

import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@Service
public class PfsdbProcedureExecutorServiceImpl implements PfsdbProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeOr207pk0ReleaseKDSPrice(String pordnum, String pusrid, String pprgid, String puserAppRoleList) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pOrdnum", pordnum);
        params.put("pUsrid", pusrid);
        params.put("pPrgid", pprgid);
        params.put("pUserAppRoleList", puserAppRoleList);

        return procedureExecutor.executeNamedProcedure("or207pk0ReleaseKDSPrice", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0searchOrdRefResponse executeOr207pk0SearchOrdRef(String pclicod, String pssn, String pclionum, String pref, String pref2, String pref3, String pref4, String pref5, String pref6, String pref7, String pref8, String pusrid, String pprgname) {
        Map<String, Object> params = new HashMap<>(14);

        params.put("pClicod", pclicod);
        params.put("pSsn", pssn);
        params.put("pClionum", pclionum);
        params.put("pRef", pref);
        params.put("pRef2", pref2);
        params.put("pRef3", pref3);
        params.put("pRef4", pref4);
        params.put("pRef5", pref5);
        params.put("pRef6", pref6);
        params.put("pRef7", pref7);
        params.put("pRef8", pref8);
        params.put("pUsrid", pusrid);
        params.put("pPrgname", pprgname);

        return procedureExecutor.executeNamedProcedure("or207pk0SearchOrdRef", params, Or207pk0searchOrdRefResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetYrnclrResponse executeOr105wpk0yrn_getYrnclr(String pprgid, String pbaseyrnUseind) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pBaseyrnUseind", pbaseyrnUseind);

        return procedureExecutor.executeNamedProcedure("or105wpk0yrn_getYrnclr", params, Or105wpk0yrnGetYrnclrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeOr207pk0FetchPackSze(String pordnum, String ppricecat) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pPricecat", ppricecat);

        return procedureExecutor.executeNamedProcedure("or207pk0FetchPackSze", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0getOrt205recordResponse executeOr207pk0GetOrt205Record(String pordnum) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("or207pk0GetOrt205Record", params, Or207pk0getOrt205recordResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetyrncpsResponse executeOr105wpk0yrn_getyrncps(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("or105wpk0yrn_getyrncps", params, Or105wpk0yrnGetyrncpsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeOr207pk0ReleaseRef(String pordnum, String pusrid, String pprgid) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pUsrid", pusrid);
        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("or207pk0ReleaseRef", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetyrncntResponse executeOr105wpk0yrn_getyrncnt(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("or105wpk0yrn_getyrncnt", params, Or105wpk0yrnGetyrncntResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeOr207pk0CopyRef(String psrcOrdnum, String pdestOrdnum, String psrcShpnum, String pdestShpnum, String pcopyFliprcInd, String pcopyRetPrcInd, String pcopyrefInd, String pcopyref2ind, String pcopyref3ind, String pcopyref4ind, String pcopyref5ind, String pcopyref6ind, String pcopyref7ind, String pcopyref8ind, String pusrid, String pprgname) {
        Map<String, Object> params = new HashMap<>(16);

        params.put("pSrcOrdnum", psrcOrdnum);
        params.put("pDestOrdnum", pdestOrdnum);
        params.put("pSrcShpnum", psrcShpnum);
        params.put("pDestShpnum", pdestShpnum);
        params.put("pCopyFliprcInd", pcopyFliprcInd);
        params.put("pCopyRetPrcInd", pcopyRetPrcInd);
        params.put("pCopyrefInd", pcopyrefInd);
        params.put("pCopyref2Ind", pcopyref2ind);
        params.put("pCopyref3Ind", pcopyref3ind);
        params.put("pCopyref4Ind", pcopyref4ind);
        params.put("pCopyref5Ind", pcopyref5ind);
        params.put("pCopyref6Ind", pcopyref6ind);
        params.put("pCopyref7Ind", pcopyref7ind);
        params.put("pCopyref8Ind", pcopyref8ind);
        params.put("pUsrid", pusrid);
        params.put("pPrgname", pprgname);

        return procedureExecutor.executeNamedProcedure("or207pk0CopyRef", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0getOrt209recordResponse executeOr207pk0GetOrt209Record(String pordnum, String pshpnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        return procedureExecutor.executeNamedProcedure("or207pk0GetOrt209Record", params, Or207pk0getOrt209recordResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetYrnffcodResponse executeOr105wpk0yrn_getYrnffcod(String pprgid, String pordnum, Integer pfabseq, Integer pyrnseq) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);
        params.put("pYrnseq", pyrnseq);

        return procedureExecutor.executeNamedProcedure("or105wpk0yrn_getYrnffcod", params, Or105wpk0yrnGetYrnffcodResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetYrnsubqltyBResponse executeOr105wpk0Yrn_getYrnsubqltyB(String pprgid, String pyrnqlty) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pYrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("or105wpk0Yrn_getYrnsubqltyB", params, Or105wpk0yrnGetYrnsubqltyBResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetYrnsubqltyResponse executeOr105wpk0yrn_getYrnsubqlty(String pprgid, String pyrnqlty, String psubqltytyp) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pYrnqlty", pyrnqlty);
        params.put("pSubqltytyp", psubqltytyp);

        return procedureExecutor.executeNamedProcedure("or105wpk0yrn_getYrnsubqlty", params, Or105wpk0yrnGetYrnsubqltyResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeProcOR105PK0_CPYFABGetFabBlob(String pprgId, String plibRefNo, String pfaceSide) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pLibRefNo", plibRefNo);
        params.put("pFaceSide", pfaceSide);

        ProcOr105pk0CpyfabgetFabBlobResponse _result =  procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetFabBlob", params, ProcOr105pk0CpyfabgetFabBlobResponse.class);
        if(_result.getPoutFabBlob() == null) {
            LOGGER.debug("Blob content not exists for poutFabBlob in procedure ProcOR105PK0_CPYFABGetFabBlob");
            throw new BlobContentNotFoundException("Blob content not found for poutFabBlob in procedure ProcOR105PK0_CPYFABGetFabBlob");
        }
        return new ByteArrayInputStream(_result.getPoutFabBlob());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0fetchExtranetDetailsResponse executeOr207pk0FetchExtranetDetails(String pordnum, String pfromShpnum, String ptoShpnum, String pfetchUnitprcInd, String pfetchRetPrcInd, String pfetchBarcodeInd, String pfetchRatioPackInd, String pfetchStyleInd, String pusrid, String pprgname, String puserAppRoleList) {
        Map<String, Object> params = new HashMap<>(12);

        params.put("pOrdnum", pordnum);
        params.put("pFromShpnum", pfromShpnum);
        params.put("pToShpnum", ptoShpnum);
        params.put("pFetchUnitprcInd", pfetchUnitprcInd);
        params.put("pFetchRetPrcInd", pfetchRetPrcInd);
        params.put("pFetchBarcodeInd", pfetchBarcodeInd);
        params.put("pFetchRatioPackInd", pfetchRatioPackInd);
        params.put("pFetchStyleInd", pfetchStyleInd);
        params.put("pUsrid", pusrid);
        params.put("pPrgname", pprgname);
        params.put("pUserAppRoleList", puserAppRoleList);

        return procedureExecutor.executeNamedProcedure("or207pk0FetchExtranetDetails", params, Or207pk0fetchExtranetDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public CreateProcOr105pk0CpyfabinsCpyFabResponse executeCreateProcOR105PK0_CPYFABInsCpyFab(CreateProcOr105pk0CpyfabinsCpyFabRequest createProcOr105pk0cpyfabinsCpyFabRequest) {
        Map<String, Object> params = new HashMap<>(17);

        params.put("pPrgId", createProcOr105pk0cpyfabinsCpyFabRequest.getPprgId());
        params.put("pDestordnum", createProcOr105pk0cpyfabinsCpyFabRequest.getPdestordnum());
        params.put("pSrcOrdnum", createProcOr105pk0cpyfabinsCpyFabRequest.getPsrcOrdnum());
        params.put("pSrcFabseq", createProcOr105pk0cpyfabinsCpyFabRequest.getPsrcFabseq());
        params.put("pChkFablibMat", createProcOr105pk0cpyfabinsCpyFabRequest.getPchkFablibMat());
        params.put("pChkOrdfab", createProcOr105pk0cpyfabinsCpyFabRequest.getPchkOrdfab());
        params.put("pExpFaborienReq", createProcOr105pk0cpyfabinsCpyFabRequest.getPexpFaborienReq());
        params.put("pExpFaborien", createProcOr105pk0cpyfabinsCpyFabRequest.getPexpFaborien());
        params.put("pExpMarkertypReq", createProcOr105pk0cpyfabinsCpyFabRequest.getPexpMarkertypReq());
        params.put("pExpMarkertyp", createProcOr105pk0cpyfabinsCpyFabRequest.getPexpMarkertyp());
        params.put("pSrcintrefno", createProcOr105pk0cpyfabinsCpyFabRequest.getPsrcintrefno());
        params.put("pSrcintrefnoVer", createProcOr105pk0cpyfabinsCpyFabRequest.getPsrcintrefnoVer());
        params.put("pSrcshadeopt", createProcOr105pk0cpyfabinsCpyFabRequest.getPsrcshadeopt());
        params.put("pExpFaborienCondmsg", createProcOr105pk0cpyfabinsCpyFabRequest.getPexpFaborienCondmsg());
        params.put("pExpMarkertypCondmsg", createProcOr105pk0cpyfabinsCpyFabRequest.getPexpMarkertypCondmsg());
        params.put("pFaceside", createProcOr105pk0cpyfabinsCpyFabRequest.getPfaceside());

        return procedureExecutor.executeNamedProcedure("CreateProcOR105PK0_CPYFABInsCpyFab", params, CreateProcOr105pk0CpyfabinsCpyFabResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOr105pk0CpyfabgetMarkertypeLovResponse executeProcOR105PK0_CPYFABGetMarkertypeLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetMarkertypeLOV", params, ProcOr105pk0CpyfabgetMarkertypeLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0YrnValRecordOrt125Response executeOr105wpk0_yrnValRecordORT125(String pprgid, String pyrnrow) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pYrnrow", pyrnrow);

        return procedureExecutor.executeNamedProcedure("or105wpk0_yrnValRecordORT125", params, Or105wpk0YrnValRecordOrt125Response.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0getKdspriceChgHistoryResponse executeOr207pk0GetKDSPriceChgHistory(String pordnum, String pshpnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        return procedureExecutor.executeNamedProcedure("or207pk0GetKDSPriceChgHistory", params, Or207pk0getKdspriceChgHistoryResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0getRefreldatesResponse executeOr207pk0GetRefreldates(String pordnum) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("or207pk0GetRefreldates", params, Or207pk0getRefreldatesResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105pk0repSameYarnUpdCcfResponse executeOr105pk0RepSameYarn_UpdCCF(String pprgid, String pordnum, String pfabseq, String pyrnpropvalList) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);
        params.put("pYrnpropvalList", pyrnpropvalList);

        return procedureExecutor.executeNamedProcedure("or105pk0RepSameYarn_UpdCCF", params, Or105pk0repSameYarnUpdCcfResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeOr207pk0UpdPriceOrt207(String pordnum, String ppricecat, String pseqcod, Integer pszeseq, String pclionum, Double punitprcAir, Double punitprcSea, Double pfliprcAir, Double pfliprcSea, String pretprc, String pretprcb, String pretprcc, String pretprcd, String pusrid, String pprogid, String pchangereason, String puserRemarks, String pupdAllSzeInd, String pupdAllPackInd, String pupdAllClionumInd) {
        Map<String, Object> params = new HashMap<>(20);

        params.put("pOrdnum", pordnum);
        params.put("pPricecat", ppricecat);
        params.put("pSeqcod", pseqcod);
        params.put("pSzeseq", pszeseq);
        params.put("pClionum", pclionum);
        params.put("pUnitprcAir", punitprcAir);
        params.put("pUnitprcSea", punitprcSea);
        params.put("pFliprcAir", pfliprcAir);
        params.put("pFliprcSea", pfliprcSea);
        params.put("pRetprc", pretprc);
        params.put("pRetprcb", pretprcb);
        params.put("pRetprcc", pretprcc);
        params.put("pRetprcd", pretprcd);
        params.put("pUsrid", pusrid);
        params.put("pProgid", pprogid);
        params.put("pChangereason", pchangereason);
        params.put("pUserRemarks", puserRemarks);
        params.put("pUpdAllSzeInd", pupdAllSzeInd);
        params.put("pUpdAllPackInd", pupdAllPackInd);
        params.put("pUpdAllClionumInd", pupdAllClionumInd);

        return procedureExecutor.executeNamedProcedure("or207pk0UpdPriceOrt207", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOr105pk0CpyfabgetCpyFabResponse executeProcOR105PK0_CPYFABGetCpyFab(String pprgId, String pordnum, Integer pfabSeq, String pdestOrdnum) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("pPrgId", pprgId);
        params.put("pOrdnum", pordnum);
        params.put("pFabSeq", pfabSeq);
        params.put("pDestOrdnum", pdestOrdnum);

        return procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetCpyFab", params, ProcOr105pk0CpyfabgetCpyFabResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOr105pk0CpyfabgetFabSeqLovResponse executeProcOR105PK0_CPYFABGetFabSeqLOV(String pprgId, String pordnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgId", pprgId);
        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetFabSeqLOV", params, ProcOr105pk0CpyfabgetFabSeqLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0yrnGetYrnqltyResponse executeOr105wpk0yrn_getYrnqlty(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("or105wpk0yrn_getYrnqlty", params, Or105wpk0yrnGetYrnqltyResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOr105pk0CpyfabgetFaborienLovResponse executeProcOR105PK0_CPYFABGetFaborienLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetFaborienLOV", params, ProcOr105pk0CpyfabgetFaborienLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0YrnGetOriclrResponse executeOr105wpk0_yrn_getOriclr(String pprgid, String pyrnclr, String pyrncnt, String pyrncps) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pYrnclr", pyrnclr);
        params.put("pYrncnt", pyrncnt);
        params.put("pYrncps", pyrncps);

        return procedureExecutor.executeNamedProcedure("or105wpk0_yrn_getOriclr", params, Or105wpk0YrnGetOriclrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or105wpk0qryOrt125Response executeOr105wpk0QryOrt125(String pprgid, String pordnum, Integer pfabseq) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);

        return procedureExecutor.executeNamedProcedure("or105wpk0QryOrt125", params, Or105wpk0qryOrt125Response.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOr105pk0CpyfabgetFabDetailsResponse executeProcOR105PK0_CPYFABGetFabDetails(String pprgId, String pordnum, Integer pfabSeq, String pccf, String poption) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgId", pprgId);
        params.put("pOrdnum", pordnum);
        params.put("pFabSeq", pfabSeq);
        params.put("pCCF", pccf);
        params.put("pOption", poption);

        return procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetFabDetails", params, ProcOr105pk0CpyfabgetFabDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0getChgReasonResponse executeOr207pk0GetChgReason(String pchangeCategory) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pChangeCategory", pchangeCategory);

        return procedureExecutor.executeNamedProcedure("or207pk0GetChgReason", params, Or207pk0getChgReasonResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Or207pk0getCmtPriceChgHistoryResponse executeOr207pk0GetCmtPriceChgHistory(String pordnum) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("or207pk0GetCmtPriceChgHistory", params, Or207pk0getCmtPriceChgHistoryResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOr105pk0CpyfabgetShadeOptionLovResponse executeProcOR105PK0_CPYFABGetShadeOptionLOV(String pprgId, String pintreftno) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgId", pprgId);
        params.put("pIntreftno", pintreftno);

        return procedureExecutor.executeNamedProcedure("ProcOR105PK0_CPYFABGetShadeOptionLOV", params, ProcOr105pk0CpyfabgetShadeOptionLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeOr207pk0PrePostUpdOrt209(String pordnum, String pseqcod, Integer pszeseq, String pshpnum, String pfieldToUpdate, Double pkdsunitprc, Double pfliprc, Double pkdsRetprc, Double pkdsRetprcb, Double pkdsRetprcc, Double pkdsRetprcd, String pusrid, String pprgid, String pchangereason, String puserRemarks, String pref, String pref2, String pref3, String pref4, String pref5, String pref6, String pref7, String pref8, String pupdAllSzeInd, String pupdAllPackInd, String pupdAllShpNumInd, String puserAppRoleList) {
        Map<String, Object> params = new HashMap<>(27);

        params.put("pOrdnum", pordnum);
        params.put("pSeqcod", pseqcod);
        params.put("pSzeseq", pszeseq);
        params.put("pShpnum", pshpnum);
        params.put("pFieldToUpdate", pfieldToUpdate);
        params.put("pKDSUnitprc", pkdsunitprc);
        params.put("pFliprc", pfliprc);
        params.put("pKdsRetprc", pkdsRetprc);
        params.put("pKdsRetprcb", pkdsRetprcb);
        params.put("pKdsRetprcc", pkdsRetprcc);
        params.put("pKdsRetprcd", pkdsRetprcd);
        params.put("pUsrid", pusrid);
        params.put("pPrgid", pprgid);
        params.put("pChangereason", pchangereason);
        params.put("pUserRemarks", puserRemarks);
        params.put("pRef", pref);
        params.put("pRef2", pref2);
        params.put("pRef3", pref3);
        params.put("pRef4", pref4);
        params.put("pRef5", pref5);
        params.put("pRef6", pref6);
        params.put("pRef7", pref7);
        params.put("pRef8", pref8);
        params.put("pUpdAllSzeInd", pupdAllSzeInd);
        params.put("pUpdAllPackInd", pupdAllPackInd);
        params.put("pUpdAllShpNumInd", pupdAllShpNumInd);
        params.put("pUserAppRoleList", puserAppRoleList);

        return procedureExecutor.executeNamedProcedure("or207pk0PrePostUpdOrt209", params, Void.class);
    }

}