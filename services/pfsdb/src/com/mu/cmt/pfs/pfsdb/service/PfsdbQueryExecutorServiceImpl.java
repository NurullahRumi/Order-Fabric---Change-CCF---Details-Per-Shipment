/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.mu.cmt.pfs.pfsdb.models.query.*;

@Service
public class PfsdbQueryExecutorServiceImpl implements PfsdbQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryOrt209currentPriceResponse> executeQryOrt209CurrentPrice(String pordnum, String pshpnum, String pseqcod, Integer pszeseq, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pSeqcod", pseqcod);
        params.put("pSzeseq", pszeseq);

        return queryExecutor.executeNamedQuery("qryOrt209CurrentPrice", params, QryOrt209currentPriceResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryOrt209CurrentPrice(String pordnum, String pshpnum, String pseqcod, Integer pszeseq, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pSeqcod", pseqcod);
        params.put("pSzeseq", pszeseq);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryOrt209CurrentPrice", params, QryOrt209currentPriceResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryOr207pk0untprcAccessResponse executeQryOr207pk0UntprcAccess(String pordnum, String pprgid, String puserAppRoleList) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pPrgid", pprgid);
        params.put("pUserAppRoleList", puserAppRoleList);

        return queryExecutor.executeNamedQuery("qryOr207pk0UntprcAccess", params, QryOr207pk0untprcAccessResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryOrt205shpnumLovResponse> executeQryOrt205ShpnumLov(String pordnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        return queryExecutor.executeNamedQuery("qryOrt205ShpnumLov", params, QryOrt205shpnumLovResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryOrt205ShpnumLov(String pordnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryOrt205ShpnumLov", params, QryOrt205shpnumLovResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryCl565pk0funcIsExtnetClientResponse> executeQryCl565pk0FuncIsExtnetClient(String pordnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        return queryExecutor.executeNamedQuery("qryCl565pk0FuncIsExtnetClient", params, QryCl565pk0funcIsExtnetClientResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryCl565pk0FuncIsExtnetClient(String pordnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryCl565pk0FuncIsExtnetClient", params, QryCl565pk0funcIsExtnetClientResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryGetChgReasonListResponse> executeQryGetChgReasonList(String pchangeCategory, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pChangeCategory", pchangeCategory);

        return queryExecutor.executeNamedQuery("qryGetChgReasonList", params, QryGetChgReasonListResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryGetChgReasonList(String pchangeCategory, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pChangeCategory", pchangeCategory);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryGetChgReasonList", params, QryGetChgReasonListResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryOrt209refColnameResponse> executeQryOrt209RefColname(String pordnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        return queryExecutor.executeNamedQuery("qryOrt209RefColname", params, QryOrt209refColnameResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryOrt209RefColname(String pordnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryOrt209RefColname", params, QryOrt209refColnameResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryShpnumLovResponse> executeQryShpnumLov(String pordnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        return queryExecutor.executeNamedQuery("qryShpnumLov", params, QryShpnumLovResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryShpnumLov(String pordnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryShpnumLov", params, QryShpnumLovResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryOr105wpk0yrnGetDefBaseyrnclrResponse executeQryOr105wpk0YrnGetDefBaseyrnclr(String pprgid, String pyrnclr, String pbaseyrnclr) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pYrnclr", pyrnclr);
        params.put("pBaseyrnclr", pbaseyrnclr);

        return queryExecutor.executeNamedQuery("qryOr105wpk0YrnGetDefBaseyrnclr", params, QryOr105wpk0yrnGetDefBaseyrnclrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryRft102clirefColnameResponse> executeQryRft102ClirefColname(String pclicod, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pClicod", pclicod);

        return queryExecutor.executeNamedQuery("qryRft102ClirefColname", params, QryRft102clirefColnameResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryRft102ClirefColname(String pclicod, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pClicod", pclicod);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryRft102ClirefColname", params, QryRft102clirefColnameResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QrySy9200pk0getUrlUpchargesResponse executeQrySy9200pk0GetUrlUpcharges(String potherParams) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOtherParams", potherParams);

        return queryExecutor.executeNamedQuery("qrySy9200pk0GetUrlUpcharges", params, QrySy9200pk0getUrlUpchargesResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryOrt207currentPriceResponse> executeQryOrt207CurrentPrice(String pordnum, String ppricecat, String pseqcod, String pclionum, String pszeseq, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pOrdnum", pordnum);
        params.put("pPricecat", ppricecat);
        params.put("pSeqcod", pseqcod);
        params.put("pClionum", pclionum);
        params.put("pSzeseq", pszeseq);

        return queryExecutor.executeNamedQuery("qryOrt207CurrentPrice", params, QryOrt207currentPriceResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryOrt207CurrentPrice(String pordnum, String ppricecat, String pseqcod, String pclionum, String pszeseq, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pOrdnum", pordnum);
        params.put("pPricecat", ppricecat);
        params.put("pSeqcod", pseqcod);
        params.put("pClionum", pclionum);
        params.put("pSzeseq", pszeseq);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryOrt207CurrentPrice", params, QryOrt207currentPriceResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryCcffabDetailsResponse executeQryCCFFabDetails(String pordnum, Integer pfabseq) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);

        return queryExecutor.executeNamedQuery("qryCCFFabDetails", params, QryCcffabDetailsResponse.class);
    }

}