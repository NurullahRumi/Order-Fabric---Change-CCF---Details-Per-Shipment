/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.VOr1000OrmnMaster;


/**
 * ServiceImpl object for domain model class VOr1000OrmnMaster.
 *
 * @see VOr1000OrmnMaster
 */
@Service("pfsdb.VOr1000OrmnMasterService")
@Validated
public class VOr1000OrmnMasterServiceImpl implements VOr1000OrmnMasterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VOr1000OrmnMasterServiceImpl.class);


    @Autowired
    @Qualifier("pfsdb.VOr1000OrmnMasterDao")
    private WMGenericDao<VOr1000OrmnMaster, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VOr1000OrmnMaster, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public VOr1000OrmnMaster create(VOr1000OrmnMaster vor1000ormnMaster) {
        LOGGER.debug("Creating a new VOr1000OrmnMaster with information: {}", vor1000ormnMaster);

        VOr1000OrmnMaster vor1000ormnMasterCreated = this.wmGenericDao.create(vor1000ormnMaster);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vor1000ormnMasterCreated);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public VOr1000OrmnMaster getById(String vor1000ormnmasterId) {
        LOGGER.debug("Finding VOr1000OrmnMaster by id: {}", vor1000ormnmasterId);
        return this.wmGenericDao.findById(vor1000ormnmasterId);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public VOr1000OrmnMaster findById(String vor1000ormnmasterId) {
        LOGGER.debug("Finding VOr1000OrmnMaster by id: {}", vor1000ormnmasterId);
        try {
            return this.wmGenericDao.findById(vor1000ormnmasterId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VOr1000OrmnMaster found with id: {}", vor1000ormnmasterId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public List<VOr1000OrmnMaster> findByMultipleIds(List<String> vor1000ormnmasterIds, boolean orderedReturn) {
        LOGGER.debug("Finding VOr1000OrmnMasters by ids: {}", vor1000ormnmasterIds);

        return this.wmGenericDao.findByMultipleIds(vor1000ormnmasterIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "pfsdbTransactionManager")
    @Override
    public VOr1000OrmnMaster update(VOr1000OrmnMaster vor1000ormnMaster) {
        LOGGER.debug("Updating VOr1000OrmnMaster with information: {}", vor1000ormnMaster);

        this.wmGenericDao.update(vor1000ormnMaster);
        this.wmGenericDao.refresh(vor1000ormnMaster);

        return vor1000ormnMaster;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public VOr1000OrmnMaster delete(String vor1000ormnmasterId) {
        LOGGER.debug("Deleting VOr1000OrmnMaster with id: {}", vor1000ormnmasterId);
        VOr1000OrmnMaster deleted = this.wmGenericDao.findById(vor1000ormnmasterId);
        if (deleted == null) {
            LOGGER.debug("No VOr1000OrmnMaster found with id: {}", vor1000ormnmasterId);
            throw new EntityNotFoundException(String.valueOf(vor1000ormnmasterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public void delete(VOr1000OrmnMaster vor1000ormnMaster) {
        LOGGER.debug("Deleting VOr1000OrmnMaster with {}", vor1000ormnMaster);
        this.wmGenericDao.delete(vor1000ormnMaster);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<VOr1000OrmnMaster> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VOr1000OrmnMasters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<VOr1000OrmnMaster> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VOr1000OrmnMasters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service pfsdb for table VOr1000OrmnMaster to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service pfsdb for table VOr1000OrmnMaster to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}